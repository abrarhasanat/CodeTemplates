
#include<bits/stdc++.h>
using namespace std;

struct Node{
char ch;
int freq;
Node* left;
 Node* right;

};
struct compare{
bool operator() (Node* a, Node* b)
{
    return (b->freq <  a->freq);
}
};
Node* makeNode(char ch, int freq)
{

    Node*  temp= new Node();
    temp->ch= ch;
    temp->freq =freq;
    temp->left= NULL;
    temp->right=NULL;
    return temp;
}

void displaycodes(Node*  root, int code[],int index=0)
{
    if(root->left)
    {
        code[index]=0;
        displaycodes(root->left, code,index+1);
    }
    if(root->right)
    {
        code[index]=1;
        displaycodes(root->right,code,index+1);
    }
    if(root->left==NULL&&root->right==NULL)
    {

        cout<<"huffman code of char "<<root->ch<<" is"<<endl;
        for(int i=0;i<index;i++)
        {
            cout<<code[i];
        }
        cout<<endl;
    }



}
void huffmancode(char ch[] , int freq[], int size)
{

    int code[100000];

    Node* left; Node* right;
    priority_queue<Node* , vector<Node*>, compare> pq;
    for(int i=0;i<size;i++)
    {
        pq.push(makeNode(ch[i],freq[i]));
    }
    while(pq.size()!=1)
    {

        left=pq.top();
        pq.pop();
        right=pq.top();
        pq.pop();
        Node* temp=makeNode('#', left->freq+right->freq);
        temp->left=left;
        temp->right=right;
        pq.push(temp);


    }

    displaycodes(pq.top(),code);

}


int main()

{

    char ch[]={'a','b','c','d','e','f'};
    int freq[]={35, 10,18, 11,7,25 };
    huffmancode(ch, freq, 6);
}






