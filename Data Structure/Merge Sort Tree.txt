



///// count the number of values that are less than k in an array on a range (multiple query )


#include <bits/stdc++.h>
#include <chrono>
//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
#define  mx 1000005
#define  ll long long
#define  pii pair<int,int>
#define  debug cout << "this far" << endl;
#define  For(i,n) for(ll i = 0; i < (n); ++i)
#define  mod  998244353
#define PI acos(-1)
#define line cout << endl;
#define fileopen freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
//#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
//using namespace __gnu_pbds;
using namespace std;
vector<int>tree[mx * 4] ;
vector<int>arr , q;
map <int , int >mp;
vector<int>merge(vector<int>&arr1 ,vector<int>&arr2) {
    int n1 = arr1.size(), n2 = arr2.size();
    vector<int> arr3(n1 + n2);
    int i = 0, j = 0, k = 0;
    while (i < n1 && j < n2) {
        if (arr1[i] < arr2[j])
            arr3[k++] = arr1[i++];
        else
            arr3[k++] = arr2[j++];
    }
    while (i < n1)
        arr3[k++] = arr1[i++];
    while (j < n2)
        arr3[k++] = arr2[j++];
    return arr3;
}
void build(int at, int left ,int right){
    if(left == right){
        tree[at].push_back(arr[left]);
        return;
    }
    build(at*2 , left , (left + right)/2);
    build(at*2 + 1, (left + right)/2 + 1, right);
    tree[at] = merge(tree[at*2] , tree[at*2 + 1]);
}
int  query(int at ,int left, int right, int start , int end , int val){
    if (start > right || end < left)
        return 0;
    if (left >= start && right <= end) {
        return lower_bound(tree[at].begin(),tree[at].end(),val)-tree[at].begin();
    }
    return query(at*2 , left , (left + right)/2 , start , end ,val)
     + query(at*2 + 1, (left + right)/2 + 1, right , start , end ,val);

}


int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int n;
    cin >> n;
    int a[n + 1];
    q.assign(n + 1 , 0);
    for(int i = 1; i <= n; ++i ) {
        cin >> a[i];
        mp[a[i]]++;
        q[i] = mp[a[i]];
    }
    arr.assign(n + 1, 0);
    mp.clear();
    for(int i = n ; i >= 1 ; --i){
        mp[a[i]]++;
        arr[i] = mp[a[i]];
    }
    build(1,1,n);
    ll ans = 0 ;
    for(int i = 1; i < n ;++i){
        ans += query(1,1,n, i + 1, n ,q[i]);
    }
    cout << ans << endl;


}
