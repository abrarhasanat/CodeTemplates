#include <bits/stdc++.h>
#define  pb push_back
#define mx 100002
using  namespace std;
int L[mx]; //?????
int P[mx][22]; //??????? ?????
int T[mx]; //?????????
vector<int>g[mx];
void dfs(int from,int u,int dep)
{
    T[u]=from;
    L[u]=dep;
    for(int i=0;i<(int)g[u].size();i++)
    {
        int v=g[u][i];
        if(v==from) continue;
        dfs(u,v,dep+1);
    }
}

int lca_query(int N, int p, int q) //N=???? ??????
{
    int tmp, log, i;

    if (L[p] < L[q])
        tmp = p, p = q, q = tmp;

    log=1;
    while(1) {
        int next=log+1;
        if((1<<next)>L[p])break;
        log++;

    }

    for (i = log; i >= 0; i--)
        if (L[p] - (1 << i) >= L[q])
            p = P[p][i];

    if (p == q)
        return p;

    for (i = log; i >= 0; i--)
        if (P[p][i] != -1 && P[p][i] != P[q][i])
            p = P[p][i], q = P[q][i];

    return T[p];
}

void lca_init(int N)
{
    memset (P,-1,sizeof(P)); //?????? ??????? ??? -? ?????
    int i, j;
    for (i = 0; i < N; i++)
        P[i][0] = T[i];

    for (j = 1; 1 << j < N; j++)
        for (i = 0; i < N; i++)
            if (P[i][j - 1] != -1)
                P[i][j] = P[P[i][j - 1]][j - 1];
}

int main(void) {
    g[0].pb(1);
    g[0].pb(2);
    g[2].pb(3);
    g[2].pb(4);
    g[0].pb(5);
    g[4].pb(6);
    g[3].pb(7);
    g[6].pb(8);
    g[1].pb(9);
    g[9].pb(10);
    g[7].pb(11);
    g[7].pb(12);
    g[11].pb(13);
    g[11].pb(14);

    dfs(0, 0, 0);

    lca_init(15);


    printf( "%d\n", lca_query(15,8,12) );


    return 0;
}