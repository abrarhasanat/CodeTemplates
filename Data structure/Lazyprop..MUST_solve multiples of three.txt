#include <bits/stdc++.h>
#define  mx 100005
using  namespace std;
int tree[mx*3][3];
int lazy[mx*3];
void swap1(int &a, int &b ,int &c)
{
    int ta =a ;
    int tb =b;
    int tc = c;
    a = tc ;
    b = ta;
    c = tb ;

}
void swap2(int &a, int &b, int &c)
{
    int ta = a, tb =b ,tc =c;
    a = tb ;
    b = tc;
    c = ta;
}
void prop(int at , int left ,int right)
{
    if(left  != right)
    {
        lazy[at*2]  = (lazy[at*2] +  lazy[at])%3;
        lazy[at*2 +1] =  (lazy[at*2 + 1] + lazy[at])%3;

    }
    if(lazy[at] == 1)
    {
        swap1(tree[at][0] , tree[at][1] , tree[at][2]);
    }
    if(lazy[at] == 2)
    {
        swap2(tree[at][0] , tree[at][1] , tree[at][2]);
    }
    lazy[at] = 0;

}
void build(int at ,int left, int right)
{
    if(left == right)

    {
        tree[at][0] = 1;
        tree[at][1]  = tree[at][2] = 0;
        return;
    }
    build(at*2 ,left , (left+right )/2);
    build( at*2 + 1 , (left+right)/2 +1 , right);
    tree[at][0] = tree[at*2][0]+ tree[at*2 + 1][0];
    tree[at][1] = tree[at*2][1]+ tree[at*2 + 1][1];
    tree[at][2] = tree[at*2][2]+ tree[at*2 + 1][2];

}
void update(int at , int left ,int right ,int start ,int end) {
    if (lazy[at]) prop(at, left, right);
    if (start > right || end < left)
        return;
    if (left >= start && right <= end) {
        if (left != right) {
            lazy[at * 2] = (1 + lazy[at * 2]) % 3;
            lazy[at * 2 + 1] = (1 + lazy[at * 2 + 1]) % 3;
        }
        swap1(tree[at][0], tree[at][1], tree[at][2]);
        return;

    }
    update(at * 2, left, (left + right) / 2, start, end);
    update(at * 2 + 1, (left + right) / 2 + 1, right, start, end);

    tree[at][0] = tree[at * 2][0] + tree[at*2 + 1][0];
    tree[at][1] = tree[at * 2][1] + tree[at*2 + 1][1];
    tree[at][2] = tree[at * 2][2] + tree[at*2 + 1][2];
}
int query(int at, int left, int right, int start, int end)
{
    if(lazy[at])
        prop(at ,left, right);
    if(start > right || end < left)
        return  0;
    if(left >= start && right <= end)
    {
        return  tree[at][0];
    }
    return  query(at*2,left, (left+right)/2 ,start ,end) +
            query(at*2 + 1, (left+right)/2 + 1 , right , start ,end);

}
int main()
{
    int n,q;
    cin >> n >>q;
    build(1,1,n);
    int f , x ,y;
    while (q--)
    {
        cin >>f  >>x >>y;
        x++ ,y++;
        if(f == 0)
        {
            update(1,1,n,x,y);
        }
        else
        {
            int ans = query(1,1,n,x,y);
            cout<<ans<<endl;
        }
    }
}