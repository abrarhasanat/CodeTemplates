vector<int> t[4 * N];
int prv[N] ;
//listen :: 
// in prv array we have to store the last occurence of a number // 
// initialize first occurence as -1
void buildseg(int at, int left, int right){
    if (left == right){
        t[at].push_back(prv[left]);
        return;
    }
    int m = (left + right) / 2;
    buildseg(at * 2, left, m);
    buildseg(at * 2 + 1, m + 1,  right);
    t[at].resize(right - left + 1) ;
    merge(t[at * 2].begin(), t[at * 2].end(), t[at * 2 + 1].begin(), t[at * 2 + 1].end(), t[at].begin());
}
int segquery(int at, int left , int right , int start , int end , int val ) {
    if(left > end || right < start) return 0 ;
    if(left >= start && right <= end) {
     return   lower_bound(t[at].begin() , t[at].end()  , val) - t[at].begin() ;
    }
    return segquery(at*2 , left ,(left + right)/2 , start , end , val )
     + segquery(at*2 + 1, (left + right)/2 + 1  , right , start , end , val )  ;
 }
